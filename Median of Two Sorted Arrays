# ***************************************** Median of Two Sorted Arrays *****************************************
"""
Given two sorted arrays nums1 and nums2 of size m and n respectively, return the median of the two sorted arrays.
The overall run time complexity should be O(log (m+n)).

##Example 1:

Input: nums1 = [1,3], nums2 = [2]
Output: 2.00000
Explanation: merged array = [1,2,3] and median is 2.

##Example 2:

Input: nums1 = [1,2], nums2 = [3,4]
Output: 2.50000
Explanation: merged array = [1,2,3,4] and median is (2 + 3) / 2 = 2.5.
"""
###################################################################################################
class Solution:
    def findMedianSortedArrays(self, nums1: list[int], nums2: list[int]) -> float:
        # Gelen iki listeyi işleme alıyoruz
        _nums1 = nums1
        _nums2 = nums2

        # İki listeyi birleştiriyoruz
        nums3 = nums1 + nums2
        
        # Birleştirilen listeyi sıralıyoruz
        nums3.sort()
        
        # Listenin uzunluğunu hesaplıyoruz
        nums3Length = len(nums3)
        
        # Orta değerlerin indekslerini belirliyoruz
        value1 = (int)(nums3Length / 2)
        value2 = (int)((nums3Length - 1) / 2)
        
        # Median hesaplanıyor: liste uzunluğuna göre tek veya çift duruma göre işlem yapılıyor
        if nums3Length % 2 == 0:
            return (float)((nums3[value1] + nums3[value2]) / 2)
        else:
            return (float)(nums3[value1])

# Örnek listeler
n1 = [1, 3]
n2 = [2]
n3 = [1, 2]
n4 = [3, 4]

solution = Solution()
# Median değerlerini hesaplıyoruz ve ekrana yazdırıyoruz
print(solution.findMedianSortedArrays(n1, n2))  # 2.0
print(solution.findMedianSortedArrays(n3, n4))  # 2.5

